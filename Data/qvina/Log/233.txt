############################################################################
# If you used Quick Vina 2 in your work, please cite:                      #
#                                                                          #
# Amr Alhossary, Stephanus Daniel Handoko, Yuguang Mu, and Chee-Keong Kwoh,#
# Fast, Accurate, and Reliable Molecular Docking with QuickVina 2,         #
# Bioinformatics (2015), doi: 10.1093/bioinformatics/btv082                #
#                                                                          #
# You are also encouraged to cite Quick Vina 1:                            #
# Stephanus Daniel Handoko, Xuchang Ouyang, Chinh Tran To Su, Chee Keong   #
# Kwoh, Yew Soon Ong,                                                      #
# QuickVina: Accelerating AutoDock Vina Using Gradient-Based Heuristics for#
# Global Optimization,                                                     #
# IEEE/ACM Transactions on Computational Biology and Bioinformatics,vol.9, #
# no. 5, pp. 1266-1272, Sept.-Oct. 2012, doi: 10.1109/TCBB.2012.82         #
#                                                                          #
# and original AutoDock Vina paper:                                        #
# O. Trott, A. J. Olson,                                                   #
# AutoDock Vina: improving the speed and accuracy of docking with a        #
# new scoring function, efficient optimization and multithreading,         #
# Journal of Computational Chemistry 31 (2010) 455-461                     #
# doi: 10.1002/jcc.21334                                                   #
############################################################################

Reading input ... done.
Setting up the scoring function ... done.
Analyzing the binding site ... done.
Using random seed: 42
Performing search ... done.
Refining results ... 
searching finished in 11.534 seconds
done.

mode |   affinity | dist from best mode
     | (kcal/mol) | rmsd l.b.| rmsd u.b.
-----+------------+----------+----------
   1         -8.5      0.000      0.000
   2         -8.2      2.803      4.699
   3         -8.1      3.705      6.009
   4         -8.1      2.804      6.787
   5         -8.0      3.048      6.229
   6         -7.9      1.214      3.094
   7         -7.8      1.292      3.116
   8         -7.8      3.176      6.513
   9         -7.7      2.899      6.711
  10         -7.7      2.524      3.670
  11         -7.5      2.966      6.004
  12         -7.5      3.058      4.826
  13         -7.5      2.062      3.375
  14         -7.5      2.886      4.642
  15         -7.4      2.866      6.304
  16         -7.3      2.507      4.208
  17         -7.3      2.904      4.022
  18         -7.3      2.189      4.181
  19         -7.3      2.344      3.082
  20         -7.2      9.085     10.975
Writing output ... done.
